
/* 
 * File:   structure.h
 * Author: caiyuxi
 *
 * Created on January 28, 2016, 9:28 PM
 */

#pragma once //protects against multiple inclusions of this header file

#include <string>
#include <vector>
#include "StreetsDatabaseAPI.h"
#include <cstdlib>
#include <string>
#include <iostream>
#include <unordered_map>
#include <map>
#include <algorithm>
using namespace std;

//pointer in street info hash table points to this class

class StreetInfo {
private:
    // index of street this segment belongs to
    // start from 0
    unsigned streetID;

    // name the this street
    string streetName;

    // this vector stored all of street segment's id on this street  
    vector<unsigned> street_segment;

    // this vector stored all of street intersection's id on this street  
    vector<unsigned> intersection;

public:

    //constructor with streetID and streetName
    StreetInfo(unsigned _streetID, string _streetName);

    //check the whether the intersection object exists or not
    bool intExist(unsigned intID);
    
    //push_back a new segment ID into the vector
    void add_new_seg(unsigned segID);

    //push_back a new intersection ID into the vector
    void add_new_int(unsigned intID);

    //return the street segment ID from the vector
    vector<unsigned> returnAllStreetSegID();

    //return the street intersection ID from the vector
    vector<unsigned> returnAllIntersectionID();
    
    //return the street name from the object
    string getStreetName();
};



// Pointer in Intersections hash table pointers to this class
// hold adjacent intersections and intersected street segment IDs

class IntersectionsClassbyID {
private:
    
    //the vector stored all adjacent intersection ID
    vector<unsigned> adjacentIntersectionsVector;
    
    //the vector stored all street segment ID
    vector<unsigned> IntersectionStreetSegmentVector;
public:
    //constructor of the class
    IntersectionsClassbyID();
    
    //add an adjacent intersection ID into the vector
    void add_adjacent_intersection(unsigned adjInterID);
    
    //to verify does the adjacent section existed or not
    bool adjIntersectionExists(unsigned adjInterID);
    
    //add an adjacent street segment
    void add_intersection_street_segment(unsigned interStrSegID);
    
    //return all of the adjacent street segments ID of this intersection
    vector<unsigned> returnAllInterStreetSegID();
    
    //return all of the adjacent intersections ID of this intersection 
    vector<unsigned> returnAllAdjInterID();
};



// Pointer in allStreetNameIntersection_HashTable points to this class
// Holds all the intersections of a street name

class allIntersectionByStreetNameClass {
private:
    vector<unsigned> allIntersectionsVector;

public:
    allIntersectionByStreetNameClass();
    
    // Vector that holds all the intersections for one street id is passed
    // The intersections in the vector is then added to allIntersectionsVector vector in the class 
    void addStreetIDIntersectionsVector(vector <unsigned> & streetIDIntersectionsVec);
    vector<unsigned> getAllIntersectionsVector();
};

 

class dataStructureSingleton {
private:
    static dataStructureSingleton *dataStructure;

    unordered_map<unsigned, StreetInfo*> StreetIDStruct_HashTable;

    // Intersection id is the key and adjacent intersection is stored in
    // a vector.
    // Searches for both from and to intersections. If street segment is not
    // one way then "from" intersection is stored in the vector of "to" intersection
    unordered_map<unsigned, IntersectionsClassbyID*> Intersection_HashTable;
    
    // Street name is the key. All intersections of each street name are stored
    // in the a vector in the allIntersectionByStreetNameClass.
    // All intersections of street IDs that are part of the street name make up 
    // all the intersections of the street
    unordered_map<string, allIntersectionByStreetNameClass*> AllStreetIntersection_HashTable;

    multimap<string, unsigned> StNameToID_BST;

    // Private Constructor
    dataStructureSingleton();

public:
    //destructor 
    ~dataStructureSingleton();
    
    //this one is the data structure created by SingleTon 
    static dataStructureSingleton* dataStructures();

    //to call destructor 
    void deleteStruc();

    //relates to std::vector<unsigned> find_street_ids_from_name(std::string street_name);
    vector<unsigned> findStreetIDFromName(string street_name);

    //relates to std::vector<unsigned> find_intersection_street_segments(unsigned intersection_id);
    vector<unsigned> findIntersectionStreetSeg(unsigned intersection_id);

    //relates to std::vector<unsigned> find_adjacent_intersections(unsigned intersection_id);
    vector<unsigned> getAllAdjacentIntersections(unsigned intersection_id);

    //relates to std::vector<unsigned> find_street_street_segments(unsigned street_id);
    vector<unsigned> getAllStreetSegForStreet(unsigned street_id);

    //relates to std::vector<unsigned> find_all_street_intersections(unsigned street_id);
    vector<unsigned> getStreetIntersectionsVector(unsigned street_id);
    
    //relates to std::vector<unsigned> find_intersection_ids_from_street_names(std::string street_name1, std::string street_name2);
    vector<unsigned> getStreetNameIntersectionsVector(string street_name);

    //return all street segments ID
    vector<unsigned> returnAllStreetSegID();

    //return all intersection ID
    vector<unsigned> returnAllIntersectionID();
};

/* To use the functions, insert dataStructureSingleton::dataStructures()->*/
