/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
#include <readline/readline.h>
#include <readline/history.h>
#include "m3.h"


vector<InterInfo> IntersectionNode;
int visited = 0;

void load_milestone3() {
    string map_name;
    bool run = 1;
    while (run) {
        cout << "Please enter the map you want to load: (type list to show all maps)" << endl;
        cin >> map_name;
        getchar();
        cout << endl;
        if (map_name == "toronto") {
            cout << "Loading the map of Toronto" << endl << endl;
            load_map("/cad2/ece297s/public/maps/toronto.streets.bin");
            IntersectionNodeInitialization();
            draw_map();
            close_map();
        } else if (map_name == "cairo") {
            cout << "Loading the map of Cairo" << endl << endl;
            load_map("/cad2/ece297s/public/maps/cairo_egypt.streets.bin");
            IntersectionNodeInitialization();
            draw_map();
            close_map();
        } else if (map_name == "hamilton") {
            cout << "Loading the map of Hamilton" << endl << endl;
            load_map("/cad2/ece297s/public/maps/hamilton_canada.streets.bin");
            IntersectionNodeInitialization();
            draw_map();
            close_map();
        } else if (map_name == "moscow") {
            cout << "Loading the map of Moscow" << endl << endl;
            load_map("/cad2/ece297s/public/maps/moscow.streets.bin");
            IntersectionNodeInitialization();
            draw_map();
            close_map();
        } else if (map_name == "newyork") {
            cout << "Loading the map of New York" << endl << endl;
            load_map("/cad2/ece297s/public/maps/newyork.streets.bin");
            IntersectionNodeInitialization();
            draw_map();
            close_map();
        } else if (map_name == "saint_helena") {
            cout << "Loading the map of Saint Helena" << endl << endl;
            load_map("/cad2/ece297s/public/maps/saint_helena.streets.bin");
            IntersectionNodeInitialization();
            draw_map();
            close_map();
        } else if (map_name == "toronto_canada") {
            cout << "Loading the map of Toronto, Canada" << endl << endl;
            load_map("/cad2/ece297s/public/maps/toronto_canada.streets.bin");
            IntersectionNodeInitialization();
            draw_map();
            close_map();
        } else if (map_name == "london") {
            cout << "Loading the map of London" << endl << endl;
            load_map("/cad2/ece297s/public/maps/london_england.streets.bin");
            IntersectionNodeInitialization();
            draw_map();
            close_map();
        } else if (map_name == "list") {
            cout << "Type in one of the following to load map: " << endl;
            cout << "toronto, cairo, hamilton, moscow, newyork, saint_helena, toronto_canada, london" << endl << endl;
        } else {
            cout << "Wrong map!" << endl;
            cout << ">>Continue to load another map? y/n" << endl;
            string yn;
            getline(cin, yn);
            if (yn == "y") run = true;
            else if (yn == "n") run = false;

        }
    }
}

//this function works for initializing the global InterInfo vector

void IntersectionNodeInitialization() {
    unsigned IntNUM = getNumberOfIntersections();

    for (unsigned IntIDX = 0; IntIDX < IntNUM; IntIDX++) {
        InterInfo currentInt(IntIDX, -2, -2, -1, 0);
        IntersectionNode.push_back(currentInt);
    }

}

//help function to find last Intersection

unsigned GetLastIntID(StreetSegmentInfo seginfo, unsigned currentID) {
    if (seginfo.from == currentID) {
        return seginfo.to;
    } else {
        return seginfo.from;
    }
}

//Dijsktra shortest path algorithm
//bool bfsPath(int startID, unsigned destID) {
//
//    //initialize the travel time 
//    double time = 0;
//    
//    
//
//    //set the initial intersection's information
//    IntersectionNode[startID].travelTime = 0;
//    IntersectionNode[startID].lastSeg = -1;
//
//    //temporary list to store dealing information
//    list <InterSec> myList;
//
//    //start from the start point
//    myList.push_back(InterSec(startID, -1, 0));
//
//    //found to see whether the 
//    bool found = false;
//
//    //initialize current street and previous street
//    int prevSt = -1;
//    int currSt = -1;
//
//    //if the list is not empty, run the loop
//    while (!myList.empty()) {
//
//        InterSec curr = myList.front();
//        myList.pop_front();
//
//
//        if (curr.IntSecID == destID) {
//            found = true;
//            
//        }
//
//
//        vector<unsigned> adjacent_segs = find_street_street_segments(curr.IntSecID);
//        for (unsigned i = 0; i < adjacent_segs.size(); i++) {
////CHECK IF CURRENT NODE FROM WAVEFRONT TAKES LESS TIME TO REACH THAN ORIGINAL TIME !!!!!!!!!!!!!!!!!!!!!!
//
//            //get the information of this street_seg
//            StreetSegmentInfo current_seg = getStreetSegmentInfo(adjacent_segs[i]);
//
//            int tempo_intID = -1;
//            //find the other intersection
//            if (!current_seg.oneWay) {
//                if (current_seg.from != curr.IntSecID) {
//                    tempo_intID = current_seg.from;
//                } else {
//                    tempo_intID = current_seg.to;
//                }
//
//            } else {
//                if (current_seg.from == curr.IntSecID) {
//                    tempo_intID = current_seg.to;
//                }
//            }
//
//
//            //find current street ID 
//            currSt = current_seg.streetID;
//
//            //figure out current segment's travel time
//            //find_street_segment_travel_time returns minutes then transfer it to seconds
//            double tempo_time = find_street_segment_travel_time(adjacent_segs[i]) * 60;
//
//            //if the it's not the start point or street are not the same 
//            //there will be 15 seconds penalty 
//            if ((prevSt != -1)&&(prevSt != currSt)) {
//                tempo_time += 15;
//            }
//
//            //current time 
//            time = IntersectionNode[curr.IntSecID].travelTime + tempo_time;
//            
//            
//
//            if ((IntersectionNode[tempo_intID].travelTime > time) || (IntersectionNode[tempo_intID].travelTime == -1)) {
//                IntersectionNode[tempo_intID].travelTime = time;
//                IntersectionNode[tempo_intID].lastSeg = adjacent_segs[i];
//                
//                //push_back the tempoID
//                myList.push_back(InterSec(tempo_intID, adjacent_segs[i], time));
//            }
//
//            //set this street to the previous street
//            //for next loop turn
//            prevSt = current_seg.streetID;
//        }
//    }
//    //searching the entire map and return the result
//    return found;
//}



bool bfsPath(int startID, int destID) {

    //increment visted 
    visited++;
    //initialize the travel time 
    double time = 0;

    //set the initial intersection's information
    IntersectionNode[startID].travelTime = 0;
    IntersectionNode[startID].lastSeg = -1;
    IntersectionNode[startID].lastStreet= -1;
    IntersectionNode[startID].visitedTime = visited;

    //temporary list to store dealing information
    list <InterSec> myList;

    //start from the start point
    myList.push_back(InterSec(startID, -1, 0));

    //found to see whether the 
    bool found = false;

    //initialize current street and previous street
    int prevSt = -1;
    int currSt = -1;

    //if the list is not empty, run the loop
    while (!myList.empty()) {

        InterSec curr = myList.front();
        myList.pop_front();


        if (curr.IntSecID == destID) {
            found = true;

        }

        prevSt = IntersectionNode[curr.IntSecID].lastStreet;
        vector<unsigned> adjacent_segs = find_street_street_segments(curr.IntSecID);
        for (auto i = 0; i < adjacent_segs.size(); i++) {
            //CHECK IF CURRENT NODE FROM WAVEFRONT TAKES LESS TIME TO REACH THAN ORIGINAL TIME !!!!!!!!!!!!!!!!!!!!!!

            //get the information of this street_seg
            StreetSegmentInfo current_seg = getStreetSegmentInfo(adjacent_segs[i]);

            int tempo_intID = -1;
            //find the other intersection
            if (!current_seg.oneWay) {
                if (current_seg.from != curr.IntSecID) {
                    tempo_intID = current_seg.from;
                } else {
                    tempo_intID = current_seg.to;
                }

            } else {
                if (current_seg.from == curr.IntSecID) {
                    tempo_intID = current_seg.to;
                }
            }


            //find current street ID 
            currSt = current_seg.streetID;

            //figure out current segment's travel time
            //find_street_segment_travel_time returns minutes then transfer it to seconds
            double tempo_time = find_street_segment_travel_time(adjacent_segs[i]) * 60;

            //if the it's not the start point or street are not the same 
            //there will be 15 seconds penalty 
            if ((prevSt != -1)&&(prevSt != currSt)) {
                tempo_time += 15;
            }

            //current time 
            time = IntersectionNode[curr.IntSecID].travelTime + tempo_time;


            if (IntersectionNode[tempo_intID].visitedTime < visited) {
                IntersectionNode[tempo_intID].visitedTime = visited;
                IntersectionNode[tempo_intID].travelTime = time;
                IntersectionNode[tempo_intID].lastSeg = adjacent_segs[i];
                IntersectionNode[tempo_intID].lastStreet = currSt;
                //push_back the tempoID
                myList.push_back(InterSec(tempo_intID, adjacent_segs[i], time));
            }else if (IntersectionNode[tempo_intID].visitedTime == visited) {
                if (IntersectionNode[tempo_intID].travelTime > time ) {
                    IntersectionNode[tempo_intID].travelTime = time;
                    IntersectionNode[tempo_intID].lastSeg = adjacent_segs[i];
                    IntersectionNode[tempo_intID].lastStreet = currSt;
                    //push_back the tempoID
                    myList.push_back(InterSec(tempo_intID, adjacent_segs[i], time));
                }
            }
        } 
    }
    //searching the entire map and return the result
    return found;
}

//a list of possible help command
vector<const char*> command_names = {
    "Button-Find", "Button-POIs", "Button-Library", "Button-Health", "Changing map", "Zooming"
};

vector<string> command_names_s = {
    "Button-Find", "Button-POIs", "Button-Library", "Button-Health", "Changing map", "Zooming"
};

std::vector<unsigned> find_path_between_intersections(unsigned
        intersect_id_start, unsigned intersect_id_end) {
    std::vector <unsigned> emptyVector;
    return (emptyVector);
}

double compute_path_travel_time(const std::vector<unsigned>& path) {
    return 0;
}

std::vector<unsigned> find_path_to_point_of_interest(unsigned
        intersect_id_start, std::string point_of_interest_name) {
    std::vector <unsigned> emptyVector;
    return (emptyVector);
}

double find_distance_between_two_intersection(unsigned
        intersect_id_1, unsigned intersect_id_2) {
    LatLon latlon_intersec_1 = getIntersectionPosition(intersect_id_1);
    LatLon latlon_intersec_2 = getIntersectionPosition(intersect_id_2);
    return find_distance_between_two_points(latlon_intersec_1, latlon_intersec_2);
}

void act_on_find_button_func_m3(void (*drawscreen_ptr) (void)) {

    //Use tab for auto completion
    rl_bind_key('\t', rl_complete);
    //Use our function for auto-complete
    rl_attempted_completion_function = command_completion_street;
    //Tell readline to handle double and single quotes for us
    rl_completer_quote_characters = strdup("\"\'");


    char* street1_c;
    char* street2_c;
    cout << "Please enter first streets: " << endl;
    if ((street1_c = readline("> ")) != NULL) {
        if (strcmp(street1_c, "") != 0)
            add_history(street1_c); //Only add to history if user input not empty

        cout << "Please enter second streets: " << endl;
        if ((street2_c = readline("> ")) != NULL) {
            if (strcmp(street2_c, "") != 0)
                add_history(street2_c); //Only add to history if user input not empty
            cout << "Processing" << endl;


            //doesn't need extra space to parse the char array
            string street1 = parse_string(street1_c, true);
            string street2 = parse_string(street2_c, true);

            cout << street1.size();


            //target intersection_ids
            vector <unsigned> target_intersections;
            vector <unsigned> street1ID = find_street_ids_from_name(street1);
            vector <unsigned> street2ID = find_street_ids_from_name(street2);



            vector <unsigned> street1IntersectionID;
            vector <unsigned> street2IntersectionID;

            //store all intersection id in with name1 in a vector
            for (unsigned street_idx = 0; street_idx < street1ID.size(); street_idx++) {
                vector<unsigned> current_intersection_ID = find_all_street_intersections(street1ID[street_idx]);
                for (unsigned intersection_idx = 0; intersection_idx < current_intersection_ID.size(); intersection_idx++) {
                    street1IntersectionID.push_back(current_intersection_ID[intersection_idx]);
                }
            }

            //store all intersection id in with name2 in a vector
            for (unsigned street_idx = 0; street_idx < street2ID.size(); street_idx++) {
                vector<unsigned> current_intersection_ID = find_all_street_intersections(street2ID[street_idx]);
                for (unsigned intersection_idx = 0; intersection_idx < current_intersection_ID.size(); intersection_idx++) {
                    street2IntersectionID.push_back(current_intersection_ID[intersection_idx]);
                }
            }

            //compare is there any duplicate intersection 
            //if duplicated, these streets intersects at that intersection
            for (unsigned compare_idx1 = 0; compare_idx1 < street1IntersectionID.size(); compare_idx1++) {
                for (unsigned compare_idx2 = 0; compare_idx2 < street2IntersectionID.size(); compare_idx2++) {
                    if (street1IntersectionID[compare_idx1] == street2IntersectionID[compare_idx2]) {
                        target_intersections.push_back(street1IntersectionID[compare_idx1]);
                    }
                }
            }

            //check the target intersection vector and report information
            if (target_intersections.size() != 0) {
                cout << street1 << " and " << street2 << " intersects at: " << endl;
                for (unsigned report_idx = 0; report_idx < target_intersections.size(); report_idx++) {
                    string current_intersection_name = getIntersectionName(target_intersections[report_idx]);
                    cout << current_intersection_name << " ";
                }
                cout << endl;
            } else {
                cout << street1 << " and " << street2 << " never intersect!" << endl;
            }
            cout << endl;
            free(street1_c);
            free(street2_c);

        }
    }
}

string parse_string(const char* name_char, bool min_1) {
    int onset, offset;
    //check if the first character ' or ", jump 1 over if it is
    if ((name_char[0] == '\'') || (name_char[0] == '\"'))
        onset = 1;
    else
        onset = 0;
    //check if the second last character ' or ", over take the length index up to the last letter if so
    int length = strlen(name_char);
    if ((name_char[length - 2] == '\'') || (name_char[length - 2] == '\"'))
        offset = length - 3;
    else if (min_1)
        offset = length - 1;
    else offset = length;
    string name_string = string(name_char, onset, offset);

    return name_string;
}

void act_on_help_button_func(void (*drawscreen_ptr) (void)) {

    //Use tab for auto completion
    rl_bind_key('\t', rl_complete);
    //Use our function for auto-complete
    rl_attempted_completion_function = command_completion_command;
    //Tell readline to handle double and single quotes for us
    rl_completer_quote_characters = strdup("\"\'");

    string list = "list";

    char* command;
    bool exit = false;
    cout << "What kind of help do you need?" << endl;
    while (!exit) {

        command = readline("> ");
        if (strcmp(command, "") != 0)
            add_history(command); //Only add to history if user input not empty
        //need one extra space to parse the whole char array
        string command_str = parse_string(command, false);

        if (command_str == command_names_s[0]) {
            //when the user types in "Button-Find"
            cout << "Button-Find: " << endl;
            cout << "You can search for a intersection using this button" << endl;
            cout << "You will be asked to insert two street name to locate the intersection after pressing this button" << endl << endl;
        } else if (command_str == command_names_s[1]) {
            //when the user types in "Button-POIs"
            cout << "Button-POIs: " << endl;
            cout << "You can show all the point of interests on the map using this button" << endl;
            cout << "Icons: " << endl << "Green: financial institutions or ATMs" << endl;
            cout << "Purple: all types of restaurants" << endl;
            cout << "White: car services locations including gas station, car wash and parking" << endl;
            cout << "Plum (light purple): arts centers, museums and cinema" << endl;
            cout << "Magenta: schools (including kindergartens, language schools, colleges)" << endl << endl;
        } else if (command_str == command_names_s[2]) {
            //when the user types in "Button-Library"
            cout << "Button-Library: " << endl;
            cout << "You can show all the Libraries on the map using this button" << endl;
            cout << "To learn more about the location, try to click on it using your mouse!" << endl << endl;
        } else if (command_str == command_names_s[3]) {
            //when the user types in "Button-Health"
            cout << "Button-Health: " << endl;
            cout << "You can show all the hospitals and health centers on the map using this button" << endl;
            cout << "To learn more about the location, try to click on it using your mouse!" << endl << endl;
        } else if (command_str == command_names_s[4]) {
            //when the user types in "Changing map"
            cout << "Changing map" << endl;
            cout << "To show a map for another city, press the Proceed button on the right" << endl << endl;
            ;
        } else if (command_str == command_names_s[5]) {
            //when the user types in "Zooming"
            cout << "Zooming" << endl;
            cout << "There are four buttons on the right you can use to change the view" << endl;
            cout << "Zoom in: enlarge the view" << endl;
            cout << "Zoom out: shrink the view" << endl;
            cout << "Zoom fit: show the complete map" << endl;
            cout << "Window: choose an area on the map to fill the screen" << endl << endl;
        } else if (command_str == list) {
            //list all the possible commands
            for (unsigned idx = 0; idx < command_names_s.size(); idx++) {
                cout << command_names_s[idx] << endl;
            }
            cout << endl;
        } else {
            cout << "Command not found. Type \"list\" for displaying all the help commands" << endl << endl;
        }
        cout << ">>Still need other helps? y/n" << endl;
        string yn;
        getline(cin, yn);
        if (yn == "y") exit = false;
        else if (yn == "n") exit = true;

        //free the character array received to prevent memory leak
        free(command);

    }
}

//Called repeatedly for a given 'stem_text'. Each time it returns a potential
//match.  When there are no more matches it returns NULL.
//
//The 'state' variable is zero the first time it is called with a given
//'stem_text', and positive afterwards.

char* street_name_generator(const char* stem_text, int state) {
    //Static here means a variable's value persists across function invocations
    static int count;

    if (state == 0) {
        //We initialize the count the first time we are called
        //with this stem_text
        count = -1;
    }

    int text_len = strlen(stem_text);

    //Search through intersection_names until we find a match
    while (count < (int) (dataStructureSingleton::dataStructures()->street_names).size() - 1) {
        count++;
        if (strncmp((dataStructureSingleton::dataStructures()->street_names)[count], stem_text, text_len) == 0) {
            //Must return a duplicate, Readline will handle
            //freeing this string itself.
            return strdup((dataStructureSingleton::dataStructures()->street_names)[count]);
        }
    }

    //No more matches
    return NULL;
}


//Given the stem 'stem_text' perform auto completion. 
//It returns an array of strings that are potential completions
//
//Note:
// 'start' and 'end' denote the location of 'stem_text' in the global
// 'rl_line_buffer' variable which contains the users current input line.
// If you need more context information to determine how to complete 'stem_text'
// you could look at 'rl_line_buffer'.

char** command_completion_street(const char* stem_text, int start, int end) {
    char ** matches = NULL;

    if (start != 0) {
        //Only generate completions if stem_text' 
        //is not the first thing in the buffer
        matches = rl_completion_matches(stem_text, street_name_generator);
    }

    return matches;
}

//Called repeatedly for a given 'stem_text'. Each time it returns a potential
//match.  When there are no more matches it returns NULL.
//
//The 'state' variable is zero the first time it is called with a given
//'stem_text', and positive afterwards.

char* command_name_generator(const char* stem_text, int state) {
    //Static here means a variable's value persists across function invocations
    static int count;

    if (state == 0) {
        //We initialize the count the first time we are called
        //with this stem_text
        count = -1;
    }

    int text_len = strlen(stem_text);

    //Search through intersection_names until we find a match
    while (count < (int) command_names.size() - 1) {
        count++;

        if (strncmp(command_names[count], stem_text, text_len) == 0) {
            //Must return a duplicate, Readline will handle
            //freeing this string itself.
            return strdup(command_names[count]);
        }
    }

    //No more matches
    return NULL;
}


//Given the stem 'stem_text' perform auto completion. 
//It returns an array of strings that are potential completions
//
//Note:
// 'start' and 'end' denote the location of 'stem_text' in the global
// 'rl_line_buffer' variable which contains the users current input line.
// If you need more context information to determine how to complete 'stem_text'
// you could look at 'rl_line_buffer'.

char** command_completion_command(const char* stem_text, int start, int end) {
    char ** matches = NULL;

    if (start != 0) {
        //Only generate completions if stem_text' 
        //is not the first thing in the buffer
        matches = rl_completion_matches(stem_text, command_name_generator);
    }

    return matches;
}

void act_on_travel_points_button_func(void (*drawscreen_ptr) (void)) {
    dataStructureSingleton::dataStructures()->get_travel_points_from_map_clicks = true;
    cout << "Click two points on the map to get travel paths" << endl;
    // locations are then received and stored in the singleton in the
    // event_loop(act_on_mousebutton, NULL, NULL, drawscreen);
    return;
}

void draw_start_end_point_icons(float frame_factor) {
    unsigned start_intersection_ID = dataStructureSingleton::dataStructures()->first_intersection_clicked_ID;
    unsigned end_intersection_ID = dataStructureSingleton::dataStructures()->second_intersection_clicked_ID;

    LatLon start_intersection = getIntersectionPosition(start_intersection_ID);
    LatLon end_intersection = getIntersectionPosition(end_intersection_ID);
    t_point start_intersection_t_point = to_xycoordinate(start_intersection);
    t_point end_intersection_t_point = to_xycoordinate(end_intersection);

    setcolor(GREEN);
    settextrotation(0);

    draw_icon_start_end_intersection(frame_factor, "S", start_intersection_t_point);

    setcolor(RED);
    settextrotation(0);

    draw_icon_start_end_intersection(frame_factor, "E", end_intersection_t_point);
}

void draw_icon_start_end_intersection(float frame_factor, string icon, t_point location) {
    if (frame_factor < 0.5 && frame_factor >= 0.3) {
        fillarc(location.x, location.y, 200, 0, 360);
    }

    else if (frame_factor < 0.3 && frame_factor >= 0.1) {
        fillarc(location.x, location.y, 80, 0, 360);
    }
    
    else if (frame_factor < 0.1 && frame_factor >= 0.01) {
        fillarc(location.x, location.y, 65, 0, 360);
    }

    else if (frame_factor < 0.01 && frame_factor >= 0.001) {
        fillarc(location.x, location.y, 30, 0, 360);
    }
    
    else if (frame_factor < 0.001 && frame_factor >= 0.0001) {
        fillarc(location.x, location.y, 15, 0, 360);
        setcolor(BLACK);
        setfontsize(8);
        t_bound_box text_bound = t_bound_box(location.x - 10, location.y - 10, location.x + 10, location.y + 10);
        drawtext(location, icon, text_bound);
    } 
    
    else if (frame_factor < 0.0001 && frame_factor >= 0.00005) {
        fillarc(location.x, location.y, 7, 0, 360);
        setcolor(BLACK);
        setfontsize(7.5);
        t_bound_box text_bound = t_bound_box(location.x - 10, location.y - 10, location.x + 10, location.y + 10);
        drawtext(location, icon, text_bound);
    } 
    
    else if (frame_factor < 0.00005 && frame_factor >= 0.00001) {
        fillarc(location.x, location.y, 4, 0, 360);
        setcolor(BLACK);
        setfontsize(7);
        t_bound_box text_bound = t_bound_box(location.x - 10, location.y - 10, location.x + 10, location.y + 10);
        drawtext(location, icon, text_bound);
    } 
    
    else {
        fillarc(location.x, location.y, 2, 0, 360);
        setcolor(BLACK);
        setfontsize(6);
        t_bound_box text_bound = t_bound_box(location.x - 3, location.y - 3, location.x + 3, location.y + 3);
        drawtext(location, icon, text_bound);
    }
}